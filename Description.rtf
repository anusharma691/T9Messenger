Non-Predictive Mode
If you are NOT in predictive mode, the application behavior is simple. Multiple clicks of a button will result in a change of the letter. For example, clicking "2" and waiting will cause the letter "A" to appear. Clicking "2" rapidly will cause a "B".

Predictive Mode
The program will always interpret button 2-9 presses as letters. The challenge is to decide which letter was intended. The output text is at the bottom is the display. It gets updated as the user presses the buttons. The display must hold at least 20 characters and need not be more than one line. At any point in time the display shows all previously typed words and the program\'92s first choice for the word currently being typed. This could be a complete word or the prefix of an incomplete word. If no legal word is possible using the prefix typed, the display will show hyphens ("-") whose count is equal to the number of keys pressed so far. The button marked "<" is the backspace. It deletes the most recent button press from the letter rows. The application behaves as if the remaining letters were pressed for the first time.
The button marked 0 / ~(tilde) is the next function. It circulates to the next word choice that can be assembled from the sequence of button presses so far. Its behavior is only well-defined if a complete word is showing. If only a prefix of a valid word is showing, the behavior is undefined except that it must not impede the user from continuing to use the application normally. If the "invalid prefix" hyphen string is showing, the next button has no effect.
There is no symbol under "#". It is the space button. Once the user enters a space, she or he may press a backspace to delete the space, and in addition to the space, the previous word is deleted.


What components exist on the client side: 

The client side provides T9 messenger functionalities. 
There is predictive and non -predictive mode.
In Non- predictive mode, client is independent of the web service. It just displays the letters corresponding to the buttons clicked. 
Predictive mode accesses the web service's methods and returns the valid word or predicted word.
MainPage.xaml is the View.
There is one Model.cs class which performs interaction with the server by invoking the desired methods. 

MainPage.xaml.cs class performs the non-predictive functionality and uses Model class to get the words in the predictive mode and update the User Interface. 


What components exist on the server side:
These are the methods existing on the server side. 

void loadDictionary()- 
Initializes a data structure with all the words from english-words.txt. This process happens only once when the server is running, no matter how many times you call this method from the client. This method has to be invoked first by the client in order to get a list of valid words or prefix after invoking the method getPredictiveText specified below. 

List<String> getPredictiveText(String keyPresses); 
This method returns a list of valid words or valid prefix that can be formed from the Key Presses that is passed as a parameter to the method, otherwise, returns a string of hyphens whose length equals the length of keys pressed. The expected input parameter is a string of keypresses between the numbers 2-9. 
